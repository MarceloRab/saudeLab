public class ProfissionalActivity extends AppCompatActivity implements CodigoAtivarDialog.LevarCodigo, HomeFragmentProfissional.LevaStatusProf {


    private FirebaseAuth auth;
    private FirebaseUser userCurrent;
    private static Toolbar toolbar;
    private BottomNavigationViewEx viewEx;
    private LinearLayout linearProgress;

    private ViewPager viewPager;

    private Switch mySwitch;
    private TextView txOff, txOn;
    private Conexao_Receiver conexao_receiver;
    private CodigoAtivarDialog codigoAtivarDialog;
    private boolean dialogQuebrado;

    private Profissional profissional;
    private DatabaseReference profRef;
    private DatabaseReference usuariosRef;
    private ValueEventListener valueEventListenerProf;
    private ValueEventListener valueEventListenerInternet;
    // private List<Profissional> profissionalList = new ArrayList<>();


    private boolean veioOndoFire;
    private boolean veioOndoDedo;
    private boolean iniciou;
    private boolean quebrado;
    private boolean switchCheckedQuebrado;
    private boolean conexaoIniciou;
    private boolean bloqueiaBancoInternetLenta;
    private boolean internetOk;
    // public static boolean isVisibleActiProf;

    private String idCurrentProf;

    private String statusProf;
    private RelativeLayout relativeSwitch;
    private TextView textAguardandoConexaoSwitch, textStatusTemCompromisso;
    private List<Usuario> usuariosMensagensOnList = new ArrayList<>();
    private String cidade;
    private String estado;
    private Handler handler = new Handler();
    private Runnable runnable;
    private String sucesso = "";
    private boolean internetRuim;
    private boolean codigoErro;
    private boolean veioAposConexaoVoltar;

    // private TarefaProfDao profDao;
    //private Profissional profAtivSQL;
    // private String statusSQL;
    //  private boolean veioDoOn;
    private boolean veioDoOffDedo;

    private DatabaseReference internetRef;
    private boolean veioAposConexaoVoltarProfAcitivity;
    private boolean veioDoResume;
    private GoogleSignInClient mGoogleSignInClient;


    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.ativar_switch_prof2);

        toolbar = findViewById(R.id.toolbarPrincipal);
        toolbar.setTitle("Doutozim");
        toolbar.setSubtitle("");
        setSupportActionBar(toolbar);

        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();
        // [END config_signin]

        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);

        conexao_receiver = new Conexao_Receiver() {
            @Override
            public void broadConexao(boolean b) {
                changeToolbarSubTitleInterna(b);
                verificaconexãoStatus(b);

            }
        };

        viewPager = findViewById(R.id.containerView_teste);
        relativeSwitch = findViewById(R.id.relativeSwitch);
        textAguardandoConexaoSwitch = findViewById(R.id.textAguardandoConexaoSwitch);
        textStatusTemCompromisso = findViewById(R.id.textStatusTemCompromisso);
        linearProgress = findViewById(R.id.linearProgressProfSwitch);
        viewEx = findViewById(R.id.bottomNavigation_Prof_teste);
        mySwitch = findViewById(R.id.mySwitchAtivarProf);

        mySwitch.setEnabled(true);


        //linearProgress.setVisibility(View.VISIBLE);
        relativeSwitch.setVisibility(View.GONE);

        txOff = findViewById(R.id.textOff);
        txOn = findViewById(R.id.textOn);

        auth = ConfiguracaoFirebase.getFirebaseAutenticacao();
        userCurrent = UsuarioProfileFirabase.getUsuarioAtual();
        profissional = new Profissional();
        idCurrentProf = UsuarioProfileFirabase.getIdUsuarioAtual();

        profRef = ConfiguracaoFirebase.getFirebaseDatabase().child("profissionais");
        usuariosRef = ConfiguracaoFirebase.getFirebaseDatabase().child("usuarios");
        internetRef = ConfiguracaoFirebase.getFirebaseDatabase().child("testeInternet");


        // configUsuarioSqlInterface(); // @@@@@@ configigura SQL


        if (savedInstanceState == null) {

            iniciou = true;
            //conexaoIniciou = true;
            try {

                ConfigSharedFire.criarShareds(ProfissionalActivity.this, true); // true para proissional

                // FirebaseDatabase.getInstance().setPersistenceEnabled(true);


            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {

            dialogQuebrado = savedInstanceState.getBoolean("quebrado");
            quebrado = savedInstanceState.getBoolean("quebrado_2");
            statusProf = savedInstanceState.getString("status");
            switchCheckedQuebrado = savedInstanceState.getBoolean("mySwitch");

            // TODO: concertar mudança orientação
            if (switchCheckedQuebrado) {
                txOn.setText("Disponível");
                txOff.setText("");
            } else {
                txOff.setText("Indisponível");
                txOn.setText("");

            }

            atualizaSwitchFire(statusProf);

            iniciou = false;
        }

        configuraBottonNavigationView();

        codigoAtivarDialog = new CodigoAtivarDialog();
        codigoAtivarDialog.setCancelable(false);

        viewPagerListened();

        mySwitchListened();


    }

    private void configUsuarioSqlInterface() {

        //profDao = new TarefaProfDao(this);
        // profAtivSQL = profDao.buscaUsuarioAtual(idCurrentProf);
        // statusSQL = profAtivSQL.getStatus();

    }

    private void verificaconexãoStatus(boolean b) {
        if (b) {

            if (!conexaoIniciou) {

                textAguardandoConexaoSwitch.setVisibility(View.GONE);
                recuperarStatusSwitch(); // uma vez


                if (!veioDoResume) {
                    veioAposConexaoVoltarProfAcitivity = true;
                }
                veioDoResume = false;

                // linearProgress.setVisibility(View.GONE);


                // configUsuarioSqlInterface(); // @@@@@@ configigura SQL

            }
        } else {

            textAguardandoConexaoSwitch.setVisibility(View.VISIBLE);
            relativeSwitch.setVisibility(View.GONE);
            linearProgress.setVisibility(View.VISIBLE);
            textStatusTemCompromisso.setVisibility(View.GONE);

        }
    }

    private void mySwitchListened() {
        mySwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {

                    cidade = "Brusque"; // TODO teste cidade

                    if (cidade == null) {

                        alertCadastro();

                    } else {

                        if (!veioOndoFire && !internetRuim) { // okRa

                            veioOndoDedo = true;


                            txOn.setText("Digite Código");
                            txOff.setText("");

                            if (!quebrado) {
                                mySwitch.setEnabled(false);
                                codigoAtivarDialog.show(getSupportFragmentManager(), "codigoDialog");

                            }
                            quebrado = false;

                        }
                        internetRuim = false;
                        //veioOndoDedo = false;

                    }


                } else {

                    if (!veioOndoFire && !internetRuim && !codigoErro) {

                        veioDoOffDedo = true;
                        mySwitch.setEnabled(false);
                        //mudaFireOff();

                        testeInternetVaiOff();
                    }

                    if (codigoErro) {
                        txOff.setText("Indisponível");
                        txOn.setText("");
                        mySwitch.setEnabled(true);

                    }
                    codigoErro = false;
                    quebrado = false;
                    internetRuim = false;
                }
            }
        });
    }


    private void testeInternetVaiOff() {
        final MySink mySink = new MySink();

        mySink.execute(); //OkResume 1

        txOff.setText("Aguarde ...");
        txOn.setText("");

        runnable = new Runnable() {
            @Override
            public void run() {

                if (sucesso.equals("")) {

                    internetRef.keepSynced(false);
                    veioDoOffDedo = false; // antes de cancelar
                    veioOndoDedo = false;
                    mySink.cancel(true);
                    ToastCustom.toastCentral(ProfissionalActivity.this, "Conexão lenta ou sem conexão");
                    internetRuim = true;// pular mudança switch

                    mySwitch.setChecked(true);
                    txOn.setText("Disponível");
                    txOff.setText("");
                    internetOk = false;

                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {

                            mySwitch.setEnabled(true);
                            mySink.cancel(true);
                            veioOndoDedo = false;

                            recuperarStatusSwitch(); // uma vez


                        }
                    }, 3000);


                }

            }
        };


        handler.postDelayed(runnable, 15000);
    }

    private void testeInternetVaiOn() {
        final MySink mySink = new MySink();

        mySink.execute();

        txOn.setText("Aguarde ...");
        txOff.setText("");

        runnable = new Runnable() {
            @Override
            public void run() {

                if (sucesso.equals("")) {

                    internetRef.keepSynced(false);
                    veioDoOffDedo = false;// antes de cancelar
                    veioOndoDedo = false;
                    mySink.cancel(true);
                    internetRuim = true;
                    ToastCustom.toastCentral(ProfissionalActivity.this, "Conexão lenta ou sem conexão");
                    mySwitch.setChecked(false);
                    txOff.setText("Indisponível");
                    txOn.setText("");
                    internetOk = false;


                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // bloqueiaBancoInternetLenta = false; // bloqueiar o mundança no banco com internet lenta
                            mySwitch.setEnabled(true);
                            // mySink.cancel(true);
                            veioDoOffDedo = false;

                            recuperarStatusSwitch(); // uma vez

                        }
                    }, 3000);


                }

            }
        };

        handler.postDelayed(runnable, 15000);
    }


    public class MySink extends AsyncTask<Void, Void, Boolean> {

        @Override
        protected Boolean doInBackground(Void... voids) {
            sucesso = "";
            //handler.post(runnable);

            internetRef.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                    String testeChildre = dataSnapshot.getKey();

                    //internetRef.keepSynced(false);

                    //internetRef.removeEventListener(valueEventListenerInternet);

                    if (!testeChildre.isEmpty()) {

                        internetOk = true;

                        if (!veioAposConexaoVoltar && !veioAposConexaoVoltarProfAcitivity) {

                            handler.removeCallbacks(runnable);

                            onPostExecute(internetOk);

                        }

                        veioOndoDedo = false;
                        veioDoOffDedo = false;
                        veioAposConexaoVoltar = false;
                        veioAposConexaoVoltarProfAcitivity = false;

                    }

                }

                @Override
                public void onCancelled(@NonNull DatabaseError databaseError) {

                }
            });


            return internetOk;
        }

        @Override
        protected void onPostExecute(Boolean b) {

            cancel(true); // cancelar outras atividades em ação
            internetRef.keepSynced(false);


            if (internetOk) {

                atualizaStatus();

                internetOk = false;
            }
            super.onPostExecute(b);
        }
    }

    private void atualizaStatus() {

        if (veioOndoDedo) {

            mudaStatusOnDedoFire();
            mySwitch.setEnabled(true);
            veioOndoDedo = false;
            veioDoOffDedo = false; // caso veio da cone


        } else if (veioDoOffDedo) {

            mudaStatusOffDedo();
            mySwitch.setEnabled(true);
            veioDoOffDedo = false;
            veioOndoDedo = false;

        }

    }


    private void mudaStatusOffDedo() {
        profissional.setStatus(Profissional.STATUS_INATIVO);
        profissional.setId(idCurrentProf);
        //profissional.atualizarStatus();

        DatabaseReference databaseReference = ConfiguracaoFirebase.getFirebaseDatabase();
        DatabaseReference refReq = databaseReference.child("profissionais");

        DatabaseReference refProf = refReq.child(idCurrentProf);

        HashMap<String, Object> profSutatus = new HashMap<>();
        profSutatus.put("status", profissional.getStatus());

        refProf.updateChildren(profSutatus).addOnSuccessListener(new OnSuccessListener<Void>() {
            @Override
            public void onSuccess(Void aVoid) {

                sucesso = "ok";
                mySwitch.setEnabled(true);
                txOff.setText("Indisponível");
                txOn.setText("");

                ToastCustom.toastCentral(ProfissionalActivity.this, "Você esta indisponível");

            }
        }); // receber um Map

        // profissional.atualizarStatusProf();

        // profAtivSQL.setSinc("sim");
        // profAtivSQL.setStatus(Profissional.STATUS_INATIVO);

        // profDao.alteraProfStatuaAtivoSQL(profAtivSQL);


    }

    private void mudaStatusOnDedoFire() {
        profissional.setStatus(Profissional.STATUS_ATIVO);
        profissional.setId(idCurrentProf);
        profissional.atualizarStatus();
        //profissional.atualizarStatusProf();
        sucesso = "ok";

        // profAtivSQL.setSinc("sim");
        // profAtivSQL.setStatus(Profissional.STATUS_ATIVO);

        // profDao.alteraProfStatuaAtivoSQL(profAtivSQL);


        mySwitch.setEnabled(true);
        txOn.setText("Disponível");
        txOff.setText("");
        ToastCustom.toastCentral(ProfissionalActivity.this, "Você esta disponível");
    }


    @Override
    public void enviaCodigos(String codigos) {

        if (codigos.equals("257")) {

            testeInternetVaiOn();

        } else if (codigos.isEmpty()) {
            codigoErro = true;
            mySwitch.setEnabled(true);
            mySwitch.setChecked(false);

        } else {
            codigoErro = true;
            mySwitch.setEnabled(true);
            mySwitch.setChecked(false);

            ToastCustom.toastCentral(this, "Código não confere.");
        }

    }

    private void alertCadastro() {

        AlertDialog.Builder builder = new AlertDialog.Builder(this)
                .setTitle("É preciso cadastrar")
                .setMessage("Preencha formulário")
                .setPositiveButton("Confirmar", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {

                        mySwitch.setChecked(false);
                        Intent intent = new Intent(new Intent(ProfissionalActivity.this, FormularioUsuActivity.class));
                        startActivity(intent);


                    }
                }).setNegativeButton("Agora não", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        mySwitch.setChecked(false);
                        dialogInterface.cancel();
                    }
                });

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    @Override
    public void enviaStatusProf(String status, String cidadeCadastro, String estadoCadastro, boolean b) {//okCidade

        veioOndoFire = true;

        veioAposConexaoVoltar = b;

        statusProf = status;

        //String teste = status;


        if (!veioOndoDedo) {

            // if (profDao.profEstaSinc(profAtivSQL)) {

            //atualizarProfFire(profAtivSQL); // TODO: SQL sinc -  já atualizado no homeProf ao receber status

            //  }

            atualizaSwitchFire(status);

            linearProgress.setVisibility(View.GONE);
            cidade = cidadeCadastro;
            estado = estadoCadastro;


        }

        veioOndoDedo = false;
        veioOndoFire = false;

    }

    /* TODO: atualiza sincronismo SQL ao receber status da HOmeProf

    private void atualizarProfFire(final Profissional profissional) { // OkSql

        DatabaseReference requisicao = profRef.child(idCurrentProf);

        Map objeto = new HashMap();

        objeto.put("status", profissional.getStatus());

        requisicao.updateChildren(objeto).addOnSuccessListener(new OnSuccessListener() {
            @Override
            public void onSuccess(Object o) {

                profAtivSQL.setSinc("sim");

                profDao.alteraProfStatuaAtivoSQL(profAtivSQL);

                ToastCustom.toastCentral(ProfissionalActivity.this, "Sinc PROf SQL - sim");


            }
        });

    }
*/
    private void recuperarStatusSwitch() {

        final DatabaseReference profStatusRef = profRef.child(idCurrentProf);

        //valueEventListenerProf = profStatusRef.addValueEventListener(new ValueEventListener() {
        profStatusRef.addListenerForSingleValueEvent(new ValueEventListener() {

            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {

                Profissional profissional = dataSnapshot.getValue(Profissional.class);

                if (profissional != null) {

                    statusProf = profissional.getStatus();

                }

                veioOndoFire = true;


                if (!veioOndoDedo) {

                    atualizaSwitchFire(statusProf);

                }

                veioOndoDedo = false;
                veioOndoFire = false;


               // profRef.child(idCurrentProf.removeEventListener(valueEventListenerProf);


            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });

    }


    private void atualizaSwitchFire(String statusProf) {

        switch (statusProf) {
            case (Profissional.STATUS_EM_COMPROMISSO):
                // emConsulta = true;

                if (veioOndoFire) {
                    // txOff.setText("Indisponível");
                    // txOn.setText("");
                    // mySwitch.setChecked(false);
                    relativeSwitch.setVisibility(View.GONE);
                    textStatusTemCompromisso.setVisibility(View.VISIBLE);


                }
                veioOndoFire = false;


                break;
            case (Profissional.STATUS_ATIVO):

                //profAtivSQL.setStatus(Profissional.STATUS_ATIVO);


                if (veioOndoFire && iniciou || quebrado) {
                    txOn.setText("Disponível");
                    txOff.setText("");
                    mySwitch.setChecked(true);
                    // quebrado = false;

                }

                veioOndoFire = false;

                linearProgress.setVisibility(View.GONE);
                relativeSwitch.setVisibility(View.VISIBLE);

                break;

            case (Profissional.STATUS_INATIVO):

                //profAtivSQL.setStatus(Profissional.STATUS_INATIVO);

                txOff.setText("Indisponível");
                txOn.setText("");
                mySwitch.setChecked(false);
                quebrado = false;


                veioOndoFire = false;
                textStatusTemCompromisso.setVisibility(View.GONE);
                linearProgress.setVisibility(View.GONE);
                relativeSwitch.setVisibility(View.VISIBLE);

                break;
            default:
                aguardaConexao();
                break;

        }

    }


    private void viewPagerListened() {
        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                Menu menu = viewEx.getMenu();
                MenuItem menuItem;
                switch (position) {
                    case 0:

                        menuItem = menu.getItem(0);
                        menuItem.setChecked(true);
                        break;
                    case 1:

                        menuItem = menu.getItem(1);
                        menuItem.setChecked(true);
                        break;
                    case 2:

                        menuItem = menu.getItem(2);
                        menuItem.setChecked(true);
                        break;
                }

            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });
    }

    private void mandarMensagemOnUsuarios() {

        usuariosRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {

                //usuariosMensagensOnList.clear();


                for (DataSnapshot dados : dataSnapshot.getChildren()) {

                    // não esquecer da permissão de read

                    Usuario usuario = dados.getValue(Usuario.class);

                    if (usuario != null && usuario.getMensagemAtivo().equals("on")) {

                        //usuariosMensagensOnList.add(profissional);
                        enviaNotificacaoMedicoAtivo(usuario.getId());

                    }

                }

            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.d("Erro", "erro" + databaseError.getMessage());

            }
        });


    }

    private void enviaNotificacaoMedicoAtivo(String id) {

        NotificacoesStatus not = new NotificacoesStatus();

        String mensagem = "Dr " + userCurrent.getDisplayName() + ": no momento estou ativo para receber chamada";
        not.setMensagem(mensagem);

        if (userCurrent.getPhotoUrl() != null) {
            not.setFotoUri(userCurrent.getPhotoUrl().toString());

        } else {

            not.setFotoUri("");
        }

        //not.setFotoUri(userCurrent.getPhotoUrl().toString());
        not.setTimeStamp(DateCustom.timeStamp());


        not.salvarNotificacao(idCurrentProf, id);


    }

    private void configuraBottonNavigationView() {


        // configurações -

        viewEx.enableAnimation(true);
        viewEx.enableItemShiftingMode(true); // modo animação (exibição) apenas do item
        viewEx.enableShiftingMode(false); // movimento do item
        viewEx.setTextVisibility(true);


        ViewPagerAdapter viewPagerAdapter = new ViewPagerAdapter(getSupportFragmentManager());
        viewPagerAdapter.addFragment(new HomeFragmentProfissional());
        viewPagerAdapter.addFragment(new AgendasFragment());
        viewPagerAdapter.addFragment(new ResumoProfFragment());

        viewPager.setAdapter(viewPagerAdapter);
        // viewPager.setPageTransformer(false, null,null);

        habilitarNavegacao(viewEx);

    }

    private void habilitarNavegacao(BottomNavigationViewEx viewEx) {

        viewEx.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {

                // FragmentManager fragmentManager = getSupportFragmentManager();
                // FragmentTransaction transaction = fragmentManager.beginTransaction();


                switch (item.getItemId()) {
                    case R.id.ic_home_prof:
                        viewPager.setCurrentItem(0);

                        //transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
                        // transaction.replace(R.id.profPager, new HomeFragmentProfissional())
                        // .commit();

                        return true;
                    case R.id.ic_data_prof:
                        viewPager.setCurrentItem(1);
                        // transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
                        // transaction.replace(R.id.profPager, new UsuariosFragmentDisponiveis())
                        // .commit();


                        return true;
                    case R.id.ic_nova_agenda_prof:
                        viewPager.setCurrentItem(3);
                        // transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
                        // transaction.replace(R.id.profPager, new CompromissoFragment())
                        //.commit();
                        return true;
                }
                return false;
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_main_profissional, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        switch (item.getItemId()) {
            case (R.id.menu_Perfil):
                abrirPerfilActivity();
                break;
            case (R.id.menu_Sair):
                deslogarUsuario();
                break;
            case (R.id.menu_Config):

                abrirConfiguracoes();


                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void deslogarUsuario() {

        try {
            auth.signOut();
            profissional.setId(idCurrentProf);
            profissional.setToken("");
            profissional.setStatus("off");

            profissional.atualizarToken();
            // profissional.atualizarTokenProf();
            profissional.atualizarStatus();
            // profissional.atualizarStatusProf();

            mGoogleSignInClient.revokeAccess();

            atualizaSharedLogout();

            startActivity(new Intent(ProfissionalActivity.this, LoginActivity.class));

            finish();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void atualizaSharedLogout() {


        //  SharedPreferences preferences =
        // getSharedPreferences(CadastroUsuActivity.SHARED_REGISTRO, MODE_PRIVATE);

        SharedPreferences.Editor editor = getSharedPreferences(ConfigSharedFire.SHARED_REGISTRO, 0)
                .edit();
        // if (preferences.contains("logado")) {

        editor.remove(ConfigSharedFire.SHARED_LINHA_LOGADO);
        //  }
        editor.putBoolean(ConfigSharedFire.SHARED_LINHA_LOGADO, false);
        editor.apply();
    }

    private void changeToolbarSubTitleInterna(boolean isConcted) {
        if (isConcted) {
            toolbar.setSubtitle("");
        } else {
            toolbar.setSubtitle(textoItalico("Aguardando conexão ..."));
        }
    }

    private CharSequence textoItalico(String texto) {
        // String prefix = "Mixing ";
        //  String suffix = "different fonts";
        //String sequence = prefix + suffix;
        SpannableStringBuilder ssb = new SpannableStringBuilder(texto);
        ssb.setSpan(new StyleSpan(ITALIC), 0, texto.length(), SPAN_EXCLUSIVE_EXCLUSIVE);
        //  ssb.setSpan(new StyleSpan(BOLD), prefix.length(), sequence.length(), SPAN_EXCLUSIVE_EXCLUSIVE);
        return ssb;
    }


    @Override
    public void onStop() {
        super.onStop();

        // isVisibleActiProf = false;

        if (valueEventListenerProf != null) {

            profRef.child(idCurrentProf).removeEventListener(valueEventListenerProf);

        }
/*
        try {

            unregisterReceiver(conexao_receiver); // esta no pause
        } catch (Exception e) {

            e.printStackTrace();
        }

*/
    }


    @Override
    protected void onPause() {
        super.onPause();

        //  MinhaAplicacaoVisibilidade.activityPausadaUsu();

        if (conexao_receiver != null) {

            unregisterReceiver(conexao_receiver);
        }


        // profRef.removeEventListener(valueEventListenerProf);
    }


    @Override
    protected void onResume() {
        super.onResume();

        veioDoResume = true;


        // isVisibleActiProf = true;
        //MinhaAplicacaoVisibilidade.activityResumeMapProf();
        registerReceiver(conexao_receiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
        //recuperarStatusSwitch();


        android.support.v4.app.Fragment fragment = getSupportFragmentManager().findFragmentByTag("codigoDialog");

        if (fragment != null && dialogQuebrado) {
            CodigoAtivarDialog dialog = (CodigoAtivarDialog) fragment;
            dialog.dismiss();
        }
        dialogQuebrado = false;
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        android.support.v4.app.Fragment fragment = getSupportFragmentManager().findFragmentByTag("codigoDialog");
        if (fragment != null) {
            dialogQuebrado = true;

        }

        quebrado = true;
        switchCheckedQuebrado = mySwitch.isChecked();
        outState.putBoolean("quebrado", dialogQuebrado);
        outState.putBoolean("quebrado_2", quebrado);
        outState.putBoolean("mySwitch", switchCheckedQuebrado);
        outState.putString("status", statusProf);


    }

    private void abrirPerfilActivity() {

        Intent intentConfiguracoes = new Intent(ProfissionalActivity.this, PerfilProfActivity.class);
        startActivity(intentConfiguracoes);
    }

    private void abrirConfiguracoes() {

        Intent intentConfiguracoes = new Intent(ProfissionalActivity.this, FormularioUsuActivity.class);
        intentConfiguracoes.putExtra("formProf", true);
        startActivity(intentConfiguracoes);
        //intentConfiguracoes.putExtra("prof", profissional);

    }


    private void aguardaConexao() {

        txOn.setText("Aguardando Conexão");

    }


    public void atualizarStatusProf() { // usado depois da construção do primeiro objeto

        DatabaseReference databaseReference = ConfiguracaoFirebase.getFirebaseDatabase();
        DatabaseReference refReq = databaseReference.child("profissionais");

        DatabaseReference refProf = refReq.child(profissional.getId());

        HashMap<String, Object> profSutatus = new HashMap<>();
        profSutatus.put("status", profissional.getStatus());

        refProf.updateChildren(profSutatus).addOnCompleteListener(new OnCompleteListener<Void>() {
            @Override
            public void onComplete(@NonNull Task<Void> task) {

            }
        }); // receber um Map

    }

    private void recuperarStatusSwitchUmavez() {
        final DatabaseReference profStatusRef = profRef.child(idCurrentProf);

        // Query usuarioPesquisa = refTipo.orderByChild("id").equalTo(idCurrentProf);
        profStatusRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {

                Profissional profissional = dataSnapshot.getValue(Profissional.class);

                if (profissional != null) {

                    statusProf = profissional.getStatus();

                }

                // atualizaSwitchFire(statusProf);

                //atualizaSwitch(statusProf);


            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });


    }


}
